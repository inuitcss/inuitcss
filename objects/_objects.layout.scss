/* ==========================================================================
   #LAYOUT
   ========================================================================== */

$inuit-layout-gutter:       inuit-spacing(base) !default;
$inuit-layout-tiny-gutter:  inuit-spacing(tiny) !default;
$inuit-layout-small-gutter: inuit-spacing(small) !default;
$inuit-layout-large-gutter: inuit-spacing(large) !default;
$inuit-layout-huge-gutter:  inuit-spacing(huge) !default;

/**
 * Grid-like layout system.
 *
 * The layout object provides us with a column-style layout system. This file
 * contains the basic structural elements, but classes should be complemented
 * with width utilities, for example:
 *
 *   <div class="o-layout">
 *     <div class="o-layout__item  u-1/2">
 *     </div>
 *     <div class="o-layout__item  u-1/2">
 *     </div>
 *   </div>
 *
 * The above will create a two-column structure in which each column will
 * fluidly fill half of the width of the parent. We can have more complex
 * systems:
 *
 *   <div class="o-layout">
 *     <div class="o-layout__item  u-1/1  u-1/3@medium">
 *     </div>
 *     <div class="o-layout__item  u-1/2  u-1/3@medium">
 *     </div>
 *     <div class="o-layout__item  u-1/2  u-1/3@medium">
 *     </div>
 *   </div>
 *
 * The above will create a system in which the first item will be 100% width
 * until we enter our medium breakpoint, when it will become 33.333% width. The
 * second and third items will be 50% of their parent, until they also become
 * 33.333% width at the medium breakpoint.
 *
 * We can also manipulate entire layout systems by adding a series of modifiers
 * to the `.o-layout` block. For example:
 *
 *   <div class="o-layout  o-layout--reverse">
 *
 * This will reverse the displayed order of the system so that it runs in the
 * opposite order to our source, effectively flipping the system over.
 *
 *   <div class="o-layout  o-layout--[right|center]">
 *
 * This will cause the system to fill up from either the centre or the right
 * hand side. Default behaviour is to fill up the layout system from the left.
 *
 * There are plenty more options available to us: explore them below.
 */





/* Default/mandatory classes
   ========================================================================== */

/**
 * 1. We need to defensively reset any box-model properties.
 * 2. Allows us to use the layout object on any type of element.
 * 3. Use the negative margin trick for multi-row grids:
 *    http://csswizardry.com/2011/08/building-better-grid-systems/
 */

.o-layout {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: flex-start;
  margin: 0; /* [1] */
  padding: 0; /* [1] */
  list-style: none; /* [2] */
  margin-top: -$inuit-layout-gutter; /* [3] */
  margin-left: -$inuit-layout-gutter; /* [3] */
}

  /**
   * 1. Required in order to combine fluid widths with fixed gutters.
   * 2. By default, all layout items are full-width (mobile first).
   * 3. Gutters provided by left padding on the x-axis and margin on the y-axis:
   *    http://csswizardry.com/2011/08/building-better-grid-systems/
   * 4. Set a default order, so we can increase of decrease that number with
   *    our `.is-first` and `.is-last` state classes.
   */

  .o-layout__item {
    box-sizing: border-box; /* [1] */
    width: 100%; /* [2] */
    margin-top: $inuit-layout-gutter; /* [3] */
    padding-left: $inuit-layout-gutter; /* [3] */
    order: 5; /* [4] */

    &.is-first {
      order: 1;
    }

    &.is-last {
      order: 10;
    }

    /**
     * If weâ€™re using Sass-MQ, automatically generate `.is-first` and `.is-last`
     * state classes for each of our defined breakpoints, and give them a
     * Responsive Suffix, e.g.:
     *
     * <div class="is-first@mobile">
     */

    // This defines the separator for the breakpoints suffix in the class name.
    // By default, we are generating the responsive suffixes for the classes
    // with a `@` symbol.
    $inuit-layout-breakpoint-separator: \@ !default;

    @if (variable-exists(mq-breakpoints)) {

      @each $inuit-bp-name, $inuit-bp-value in $mq-breakpoints {

        @include mq($from: $inuit-bp-name) {

          &.is-first#{$inuit-layout-breakpoint-separator}#{$inuit-bp-name} {
            order: 1;
          }

          &.is-last#{$inuit-layout-breakpoint-separator}#{$inuit-bp-name} {
            order: 10;
          }

        }

      }

    }

  }





/* Gutter size modifiers
   ========================================================================== */

.o-layout--flush {
  margin-top: 0;
  margin-left: 0;

  > .o-layout__item {
    margin-top: 0;
    padding-left: 0;
  }

}


.o-layout--tiny {
  margin-top: -$inuit-layout-tiny-gutter;
  margin-left: -$inuit-layout-tiny-gutter;

  > .o-layout__item {
    margin-top: $inuit-layout-tiny-gutter;
    padding-left: $inuit-layout-tiny-gutter;
  }

}


.o-layout--small {
  margin-top: -$inuit-layout-small-gutter;
  margin-left: -$inuit-layout-small-gutter;

  > .o-layout__item {
    margin-top: $inuit-layout-small-gutter;
    padding-left: $inuit-layout-small-gutter;
  }

}


.o-layout--large {
  margin-top: -$inuit-layout-large-gutter;
  margin-left: -$inuit-layout-large-gutter;

  > .o-layout__item {
    margin-top: $inuit-layout-large-gutter;
    padding-left: $inuit-layout-large-gutter;
  }

}


.o-layout--huge {
  margin-top: -$inuit-layout-huge-gutter;
  margin-left: -$inuit-layout-huge-gutter;

  > .o-layout__item {
    margin-top: $inuit-layout-huge-gutter;
    padding-left: $inuit-layout-huge-gutter;
  }

}





/* Vertical alignment modifiers
   ========================================================================== */

/**
 * Align all grid items to the middles of each other.
 */

.o-layout--middle {
  align-items: center;
}


/**
 * Align all grid items to the bottoms of each other.
 */

.o-layout--bottom {
  align-items: flex-end;
}


/**
 * Stretch all grid items of each row to have an equal-height.
 *
 * 1. Force direct child elements of the `.o-layout__item` to be full width of
 *    the item.
 */

.o-layout--stretch {
  align-items: stretch;

  > .o-layout__item {
    display: flex;

    > * {
      width: 100%; /* [1] */
    }

  }

}





/* Fill order modifiers
   ========================================================================== */

/**
 * Fill up the layout system from the centre.
 */

.o-layout--center {
  justify-content: center;
}


/**
 * Fill up the layout system from the right-hand side.
 */

.o-layout--right {
  justify-content: flex-end;

  &.o-layout--reverse {
    justify-content: flex-start;
  }

}


/**
 * Fill up the layout system from the left-hand side.
 */

.o-layout--left {
  justify-content: flex-start;

  &.o-layout--reverse {
    justify-content: flex-end;
  }

}


/**
 * Reverse the rendered order of the grid system.
 */

.o-layout--reverse {
  flex-direction: row-reverse;
}





/* Auto-widths modifier
   ========================================================================== */

/**
 * Cause layout items to take up a non-explicit amount of width.
 */

.o-layout--auto {

  > .o-layout__item {
    width: auto;
  }

}
