/* ==========================================================================
   #SPACING
   ========================================================================== */

/**
 * Utility classes for spacing (margin/padding) mapped to spacing variables
 * list in the /settings/_core.scss file. Generates classes as follows:
 *
 *   .u-mt {}       = margin-top: $spacing;
 *   .u-pl--l {}     = padding-left: $spacing-l;
 *   .u-mr--xs {}    = margin-right: $spacing-xs
 *   .u-p {}        = padding: $spacing;
 *   .u-pr--flush {} = padding-right: 0;
 *   .u-ph {}       = padding-right: $spacing; padding-left: $spacing;
 *   .u-pv--xl {}    = padding-top: $spacing-xl; padding-bottom: $spacing-xl;
 */

/* stylelint-disable string-quotes, max-nesting-depth */

$spacing-properties: (
  'p': 'padding',
  'm': 'margin',
) !default;

$spacing-directions: (
  null: null,
  't': '-top',
  'r': '-right',
  'b': '-bottom',
  'l': '-left',
  'h': '-left' '-right',
  'v': '-top' '-bottom',
) !default;

$spacing-sizes: (
  '--flush': 0,
  '--xxs':   $spacing-xxs,
  '--xs':    $spacing-xs,
  '--s':     $spacing-s,
  null:     $spacing,
  '--l':     $spacing-l,
  '--xl':    $spacing-xl,
  '--xxl':   $spacing-xxl
) !default;





// Spacing mixin generates the spacing classes
// for example:
// .u-p
// .u-p--xs
// .u-pv--l
// .u-m
// .u-m--xxl
// .u-mb--s etc.

@mixin spacing(
	$properties: $spacing-properties,
	$directions: $spacing-directions,
	$sizes: $spacing-sizes,
	$breakpoint: null
) {

	@each $property-namespace, $property in $properties {

		@each $direction-namespace, $direction-rule in $directions {

			@each $size-namespace, $size in $sizes {

				.u-#{$property-namespace}#{$direction-namespace}#{$size-namespace}#{$breakpoint} {

					@each $direction in $direction-rule {
						#{$property}#{$direction}: $size !important;
					}

				}

			}

		}

	}

}

/**
 * Initiate the spacing mixin to generate spacing classes. 
 * Use these in your markup:
 *
 * <div class="u-pl--l"> = padding-left: $spacing-large;
 */

@include spacing();





/**
 * If using Sass-MQ for breakpoints, generate responsive spacing
 * classes with breakpoint suffix. Note: breakpoints are all
 * mobile-up, i.e. mobile-first.
 * 
 * For example: 
 *
 * <div class="u-m--s@desktop">
 */

$responsive-spacing: false !default;

$responsive-spacing-properties: $spacing-properties !default;
$responsive-spacing-directions: $spacing-directions !default;
$responsive-spacing-sizes: $spacing-sizes !default;



@if (variable-exists(mq-breakpoints) and $responsive-spacing == true) {
	
	@each $breakpoint-name, $breakpoint-value in $mq-breakpoints {
		
		@include mq($from: $breakpoint-name) {
			
			@include spacing(
				$responsive-spacing-properties,
				$responsive-spacing-directions,
				$responsive-spacing-sizes,
				#{$breakpoint-separator}#{$breakpoint-name}
			);
			
		}
		
	}
	
}

/* stylelint-enable string-quotes, max-nesting-depth */
