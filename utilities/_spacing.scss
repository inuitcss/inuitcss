/* ==========================================================================
   #SPACING
   ========================================================================== */

/**
 * Utility classes to put specific spacing values onto elements. The below loop
 * will generate us a suite of classes like:
 *
 *   .u-mt {}
 *   .u-pl4 {}
 *   .u-mr2 {}
 *   .u-p {}
 *   .u-pr0 {}
 *   .u-ph {}
 *   .u-pv2 {}
 */

/* stylelint-disable string-quotes, max-nesting-depth */

$spacing-directions: (
  null: null,
  't': '-top',
  'r': '-right',
  'b': '-bottom',
  'l': '-left',
  'h': '-left' '-right',
  'v': '-top' '-bottom',
) !default;

$spacing-properties: (
  'p': 'padding',
  'm': 'margin',
) !default;

$spacing-sizes: (
  '1': $global-spacing-unit-xsmall,
  '2': $global-spacing-unit-small,
  '3': $global-spacing-unit,
  '4': $global-spacing-unit-large,
  '5': $global-spacing-unit-xlarge,
  '0': 0
) !default;

// When using Sass-MQ, this defines the separator for the breakpoints suffix
// in the class name. By default, we are generating the responsive suffixes
// for the classes with a `@` symbol so you get classes like:
// <div class="u-p2@tablet">
$spacing-breakpoint-separator: \@ !default;

@mixin spacing(
	$properties: $spacing-properties,
	$directions: $spacing-directions,
	$sizes: $spacing-sizes,
	$breakpoint: null
) {

	@each $property-namespace, $property in $properties {

		@each $direction-namespace, $direction-rules in $directions {

			@each $size-namespace, $size in $sizes {

				.u-#{$property-namespace}#{$direction-namespace}#{$size-namespace}#{$breakpoint} {

					@each $direction in $direction-rules {
						#{$property}#{$direction}: $size !important;
					}

				}

			}

		}

	}

}

/**
 * A series of spacing helper classes that you can use to give spacing.
 * Use these in your markup:
 *
 * <div class="u-pl4">
 *
 * The following will generate spacing helper classes.
 */

@include spacing();

/**
 * If weâ€™re using Sass-MQ, automatically generate responsive helpers for each of our
 * defined breakpoints, and give them a Responsive Suffix, e.g.:
 *
 * <div class="u-m5@tablet">
 */

$spacing-responsive: false !default;

$spacing-responsive-properties: $spacing-properties !default;

$spacing-responsive-directions: $spacing-directions !default;

$spacing-responsive-sizes: $spacing-sizes !default;

@if (variable-exists(mq-breakpoints) and $spacing-responsive == true) {
	@each $breakpoint-name, $breakpoint-value in $mq-breakpoints {
		@include mq($from: $breakpoint-name) {
			@include inuit-spacing(
					$spacing-responsive-properties,
					$spacing-responsive-directions,
					$spacing-responsive-sizes,
					#{$spacing-breakpoint-separator}#{$breakpoint-name}
			);
		}
	}
}

/* stylelint-enable string-quotes, max-nesting-depth */
